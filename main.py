import os
import sys
import plotly.graph_objects as go

import math

import pandas as pd
import json
pd.set_option('display.max_columns', None)

from io import BytesIO
from pathlib import Path

import socceraction.spadl as spadl
import socceraction.spadl.wyscout as wyscout

import streamlit as st
import matplotlib.pyplot as plt
import seaborn as sns
from PIL import Image
from utils import Utils

# Configura√ß√µes de p√°gina
st.set_page_config(
    page_title="Visualiza√ß√£o de Dados",
    page_icon="üéì",
    layout="wide"
)

# T√≠tulo e cabe√ßalho
st.title("Visualiza√ß√£o de Dados")
# st.markdown("Bem-vindos ao site da Escola XYZ!")

# Menu de navega√ß√£o
menu_options = ["Home", "Contribui√ß√µes", "Dados", "Visualiza√ß√£o Manual"]
selected_option = st.sidebar.selectbox("Navega√ß√£o", menu_options)

#Contribuintes
owners = ["Caio Maciel", "Oth√°vio Rudd√°"]

utils = Utils()

# P√°gina inicial
if selected_option == "Home":
    st.header("Bem-vindo ao trabalho de visualiza√ß√£o de dados!")
    # st.write("Aqui voc√™ encontrar√° informa√ß√µes sobre nossos cursos, professores e muito mais.")

    st.subheader("Contribuintes:")
    for i in owners:
        st.write(i)

    st.subheader("Sum√°rio")
    for i in menu_options:
        st.write("\t     -"+i)


elif selected_option == "Contribui√ß√µes":
    st.header("Contribui√ß√µes")
    st.write("Nessa p√°gina descrevemos as contribui√ß√µes de cada aluno")

   
    contributions = {
        "Contribuinte": owners,
        # "contribui√ß√£o": owners,
        "Contribui√ß√£o": ["Desenvolveu a visualiza√ß√£o 5 e participou do desenvolvimento do  design do site e do processo de deploy do sistema web.",
                         "Desenvolveu a visualiza√ß√£o 1 e 6 e participou do processo de deploy do sistema web.",]
    }
    cursos_df = pd.DataFrame(contributions)
    cursos_df = cursos_df.reset_index(drop=True)
    st.dataframe(cursos_df)

# P√°gina de contato
elif selected_option == "Dados":
    st.header("Dados Utilizados")
    text = "texto de dados"
    st.write(text)
    st.header("Times")
    st.dataframe(utils.df_teams.head())
    st.header("Eventos")
    st.dataframe(utils.df_events.head())


# P√°gina de dados manual
elif selected_option == "Visualiza√ß√£o Manual":
    st.header("Total de Passes")
    listEvents = ['Head pass', 'Simple pass', 'High pass', 'Smart pass', 'Hand pass']
    df = utils.countingEvents(listEvents)
    df['total'] = df.sum(axis=1)
    df = df.sort_values('total', ascending=False)
    df['mean'] = df['total']/38
    st.dataframe(df)

    st.header("Gr√°fico de Passes")
    utils.plotChart(title='M√©dia de Passes por Time',x_title='Time',y_title='M√©dia de Passes',x_df=df.index,y_df=df['mean'])

    listEvents = ['Free kick shot', 'Shot']
    df = utils.countingEvents(listEvents)
    st.header("Gr√°fico de Chutes")
    df['total'] = df.sum(axis=1)
    df = df.sort_values('total', ascending=False)
    df['mean'] = df['total']/38
    utils.plotChart(title='M√©dia de Chutes por Time',x_title='Time',y_title='M√©dia de Chutes',x_df=df.index,y_df=df['mean'])

