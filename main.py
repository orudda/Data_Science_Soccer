import os
import sys
import plotly.graph_objects as go

import math

import pandas as pd
import json
pd.set_option('display.max_columns', None)

from io import BytesIO
from pathlib import Path

import socceraction.spadl as spadl
import socceraction.spadl.wyscout as wyscout

import streamlit as st
import matplotlib.pyplot as plt
import seaborn as sns
from PIL import Image
from utils import Utils

# Configura√ß√µes de p√°gina
st.set_page_config(
    page_title="Ci√™ncia de Dados Aplicada ao Futebol",
    page_icon="üéì",
    layout="wide"
)

# T√≠tulo e cabe√ßalho
st.title("Ci√™ncia de Dados Aplicada ao Futebol")

# Menu de navega√ß√£o
menu_options = ["Home", "Contributions", "Data", "Visualizations"]
selected_option = st.sidebar.selectbox("Navega√ß√£o", menu_options)

#Contribuintes
owners = ["Caio Maciel", "Oth√°vio Rudd√°"]

utils = Utils()

# P√°gina inicial
if selected_option == "Home":
    st.header("Modelar Infer√™ncias Utilizando a Localiza√ß√£o dos Passes no Futebol")
    st.write("Aqui voc√™ encontrar√° informa√ß√µes sobre o desenvolvimento do nosso trabalho.")

    st.subheader("Contributors:")
    for i in owners:
        st.write(i)

    st.subheader("Summary")
    for i in menu_options:
        st.write("\t     -"+i)


elif selected_option == "Contributions":
    st.header("Contribui√ß√µes")
    st.write("Nessa p√°gina descrevemos as contribui√ß√µes de cada aluno")

   
    contributions = {
        "Contribuinte": owners,
        # "contribui√ß√£o": owners,
        "Work done": [".",
                      ".",]
    }
    cursos_df = pd.DataFrame(contributions)
    cursos_df = cursos_df.reset_index(drop=True)
    st.dataframe(cursos_df)

# P√°gina de contato
elif selected_option == "Data":
    st.header("Data")
    text = "Data from Wyscout 2017-18 Season"
    st.write(text)
    st.header("Teams")
    st.dataframe(utils.df_teams.head())
    st.header("Events")
    st.dataframe(utils.df_events.head())

# P√°gina de dados manual
elif selected_option == "Visualizations":
    st.header("Passes Information")
    listEvents = ['Head pass', 'Simple pass', 'High pass', 'Smart pass', 'Hand pass']
    df = utils.countingEvents(listEvents)
    df['total'] = df.sum(axis=1)
    df = df.sort_values('name', ascending=True)
    df['mean'] = df['total'] // 38
    st.dataframe(df)

    st.header("Passes Plot")
    df = df.sort_values('name', ascending=False)
    utils.plotChart(title='',x_title='Passes',y_title='Teams',x_df=df['mean']	,y_df=df.index)
    
    st.header("Shots Plot")
    listEvents = ['Free kick shot', 'Shot']
    df = utils.countingEvents(listEvents)
    df['total'] = df.sum(axis=1)
    df = df.sort_values('name', ascending=False)
    df['mean'] = df['total'] // 38
    utils.plotChart(title='', x_title='Shots', y_title='Teams', x_df=df['mean'], y_df=df.index)

